<?php

namespace Bundles\StoreBundle\Repository;

use Bundles\UserBundle\Entity\User;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends \Doctrine\ORM\EntityRepository
{
    public function unreadCount(User $user)
    {
        $qb = $this->createQueryBuilder('m')
                ->select('COUNT(m.id) as num_mess')
                ->where('m.user = :user')
                ->andWhere('m.viewed = 0')
                ->setParameter('user', $user)
            ;
        return $qb->getQuery()->getSingleScalarResult();
    }
    
    public function getDialog(User $user1, User $user2)
    {
        $qb = $this->createQueryBuilder('m')
                ->where('(m.sender = :user1 AND m.user = :user2) OR (m.sender = :user2 AND m.user = :user1)')
                ->setParameter('user1', $user1)
                ->setParameter('user2', $user2)
                ->orderBy('m.id', 'ASC')
            ;
        return $qb->getQuery()->getResult();
    }
    
    public function getDialogs(User $user)
    {
        $sql = "SELECT id as message_id, sender_id, user_id, created_at, text FROM message mes WHERE created_at = "
        . "(SELECT MAX(created_at) FROM message mes1 WHERE (mes1.sender_id = mes.sender_id AND mes1.user_id = mes.user_id AND mes.user_id = ".$user->getId().")"
                ."OR (mes1.sender_id = mes.sender_id AND mes1.user_id = mes.user_id AND mes.sender_id = ".$user->getId().")"
                . "OR (mes1.sender_id = mes.user_id AND mes1.user_id = mes.sender_id AND mes1.user_id = ".$user->getId().")"
                . "OR (mes1.sender_id = mes.user_id AND mes1.user_id = mes.sender_id AND mes1.sender_id = ".$user->getId()."))"
//                . " AND (sender_id = ".$user->getId()." OR user_id = ".$user->getId().")"
                . "ORDER BY created_at DESC";
        $stmt = $this->_em->getConnection()->prepare($sql);
        $stmt->execute();
        return  $stmt->fetchAll(); 
//        return $qb->getQuery()->getResult();
    }
}
