<?php

namespace Bundles\StoreBundle\Repository;

use Bundles\StoreBundle\Entity\City;
use Bundles\UserBundle\Entity\User;
use Bundles\StoreBundle\Entity\Community;
use Bundles\StoreBundle\Entity\Post;

/**
 * CommunityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommunityRepository extends \Doctrine\ORM\EntityRepository
{
    public function getArrayByCity($cityId)
    {
        $qb = $this->createQueryBuilder('com')
            ->select('com.id, com.name')
            ->where('com.city = '.$cityId)
            ->getQuery()
        ;

        return $qb->getArrayResult();
    }

    public function getByName($name)
    {
        $qb = $this->createQueryBuilder('com')
            ->join('com.icon', 'i')
            ->where("com.name = '".$name."'")
            ->getQuery()
        ;

        return $qb->getOneOrNullResult();
    }
    
    public function getNearly($user, $limit = 6)
    {
        $data = $this->getLocation($user->getCity()); 

        if (!is_array($data)) {
            return;
        }

        $latitude = $data['lat'];
        $longitude = $data['lng'];
                
        $communities =  $this->createQueryBuilder('com')
       //     ->select('com.id, com.name, com.lat, com.lng ')
            ->addSelect("(6371 * ACOS(SIN(RADIANS($latitude)) * SIN(RADIANS(com.lat)) + COS(RADIANS($latitude)) * COS(RADIANS(com.lat)) * COS(RADIANS(com.lng) - RADIANS($longitude)))) as HIDDEN distance")
            ->orderBy('distance', 'ASC')
        ;
        
        if ($user) {
            $communities
                ->andWhere(':user NOT MEMBER OF com.users')
                ->setParameter('user', $user)
            ;
        }
        
        return $communities
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult()
            ;
    }
    
    public function getNearlyForCommunity(Community $community, $limit = 6)
    {
        $latitude = $community->getLat();
        $longitude = $community->getLng();
                
        $communities =  $this->createQueryBuilder('com')
       //     ->select('com.id, com.name, com.lat, com.lng ')
            ->addSelect("(6371 * ACOS(SIN(RADIANS($latitude)) * SIN(RADIANS(com.lat)) + COS(RADIANS($latitude)) * COS(RADIANS(com.lat)) * COS(RADIANS(com.lng) - RADIANS($longitude)))) as HIDDEN distance")
            ->orderBy('distance', 'ASC')
            ->andWhere('com.id != :community')
            ->setParameter('community', $community)
            ;
        
        return $communities
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult()
            ;
    }
    
    public function getEnabled()
    {           
        $communities =  $this->createQueryBuilder('com')
            ->join('com.image', 'i')
            ->where('com.enable = true')
            ->orderBy('com.name')
            ->getQuery()
            ->getResult()
        ;
        return $communities;
    }
    
    public function getNearlyByArea($city, $maxDist = 150)
    {
        $data = $this->getLocation($city); 

        if (!is_array($data)) {
            return;
        }

        $latitude = $data['lat'];
        $longitude = $data['lng'];
                
        $communities =  $this->createQueryBuilder('com')
            ->select('com.id, com.name, com.lat, com.lng, com.enable')
            ->addSelect("(6371 * ACOS(SIN(RADIANS($latitude)) * SIN(RADIANS(com.lat)) + COS(RADIANS($latitude)) * COS(RADIANS(com.lat)) * COS(RADIANS(com.lng) - RADIANS($longitude)))) as distance")
//            ->having("distance < $maxDist")
            ->orderBy('distance', 'ASC')
            ->getQuery()
            ->getResult()
        ;
        return [
            'city' => $data,
            'communities' => $communities
        ];
    }
  
    private function getLocation($address)
    {
        $city = str_replace(' ', '+', trim($address));

        $url = "http://maps.googleapis.com/maps/api/geocode/json?address=$city&sensor=false";
        
        $ch = curl_init();
        // Disable SSL verification
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        // Will return the response, if false it print the response
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        // Set the url
        curl_setopt($ch, CURLOPT_URL,$url);
        // Execute
        $result=curl_exec($ch);
        // Closing
        curl_close($ch);
        
        $data = json_decode($result, true);
        //dump($data); die;
        if ($data['status'] == "OK") {
            return $data['results'][0]['geometry']['location'];
//            $this->setLat($data['results'][0]['geometry']['location']['lat']);
//            $this->setLng($data['results'][0]['geometry']['location']['lng']);
        }
    }
    
    public function getCommunityByUser(User $user)
    {
        return $this->createQueryBuilder('comm')
                ->where(':user MEMBER OF comm.users')
                ->setParameter('user', $user)
                ->getQuery()
                ->getResult();
    }
    
    public function getCommunityNoPost(Post $post, User $user)
    {
        return $this->createQueryBuilder('comm')
                ->where(':post NOT MEMBER OF comm.post')
                ->setParameter('post', $post)
                ->andWhere(':user MEMBER OF comm.users')
                ->setParameter('user', $user)
                ->getQuery()
                ->getResult();
    }
    
    public function getWithUsersCommunities()
    {
        return $this->createQueryBuilder('comm')
                ->join('comm.users', 'u')
                ->having('COUNT(u.id) > 0')
                ->groupBy('comm.id')
                ->getQuery()
                ->getResult();
    }
}